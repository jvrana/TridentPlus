import jdna
import pytest

from tridentplus.organisms import Yeast


@pytest.fixture(scope='session')
def random_template():
    return jdna.Sequence.random(100000)


@pytest.fixture(scope='session')
def test_plasmid():
    return 'GTTTAAACTGGCTGCTACCCACGCCCATGGTCATAGCTGTTTCCTGTGTGAAATTGTTATCCGCTCACAATTCCACACAACATAGGAGCCGGAAGCATAAAGTGTAAAGCCTGGGGTGCCTAATGAGTGAGGTAACTCACATTAATTGCGTTGCGCTCACTGCCCGCTTTCCAGTCGGGAAACCTGTCGTGCCAGCTGCATTAATGAATCGGCCAACGCGCGGGGAGAGGCGGTTTGCGTATTGGGCGCTCTTCCGCTTCCTCGCTCACTGACTCGCTGCGCTCGGTCGTTCGGCTGCGGCGAGCGGTATCAGCTCACTCAAAGGCGGTAATACGGTTATCCACAGAATCAGGGGATAACGCAGGAAAGAACATGTGAGCAAAAGGCCAGCAAAAGGCCAGGAACCGTAAAAAGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCGGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTCCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCAATGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGTTCAGCCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGTAAGACACGACTTATCGCCACTGGCAGCAGCCACTGGTAACAGGATTAGCAGAGCGAGGTATGTAGGCGGTGCTACAGAGTTCTTGAAGTGGTGGCCTAACTACGGCTACACTAGAAGGACAGTATTTGGTATCTGCGCTCTGCTGAAGCCAGTTACCTTCGGAAAAAGAGTTGGTAGCTCTTGATCCGGCAAACAAACCACCGCTGGTAGCGGTGGTTTTTTTGTTTGCAAGCAGCAGATTACGCGCAGAAAAAAAGGATCTCAAGAAGATCCTTTGATCTTTTCTACGGGGTCTGACGCTCAGTGGAACGAAAACTCACGTTAAGGGATTTTGGTCATGAGATTATCAAAAAGGATCTTCACCTAGATCCTTTTAAATTAAAAATGAAGTTTTAAATCAATCTAAAGTATATATGAGTAAACTTGGTCTGACAGTTACCAATGCTTAATCAGTGAGGCACCTATCTCAGCGATCTGTCTATTTCGTTCATCCATAGTTGCCTGACTGCCCGTCGTGTAGATAACTACGATACGGGAGGGCTTACCATCTGGCCCCAGTGCTGCAATGATACCGCGAGACCCACGCTCACCGGCTCCAGATTTATCAGCAATAAACCAGCCAGCCGGAAGGGCCGAGCGCAGAAGTGGTCCTGCAACTTTATCCGCCTCCATCCAGTCTATTAATTGTTGCCGGGAAGCTAGAGTAAGTAgttcgccagttaatagtttgcgcaacgttgttgccattgctacaggcatcgtggtgtcacgctcgtcgtttggtatggcttcattcagctccggttcccaacgatcaaggcgagttacatgatcccccatgttgtgaaaaaaagcggttagctccttcggtcctccgatcgttgtcagaagtaagttggccgcagtgttatcactcatggttatggcagcactgcataattctcttactgtcatgccatccgtaagatgcttttctgtgactggtgagtactcaaccaagtcattctgagaatagtgtatgcggcgaccgagttgctcttgcccggcgtcaatacgggataataccgcgccacatagcagaactttaaaagtgctcatcattggaaaacgttcttcggggcgaaaactctcaaggatcttaccgctgttgagatccagttcgatgtaacccactcgtgcacccaactgatcttcagcatcttttactttcaccagcgtttctgggtgagcaaaaacaggaaggcaaaatgccgcaaaaaagggaataagggcgacacggaaatgttgaatactcatactcttcctttttcaatattattgaagcatttatcagggttattgtctcatgagcggatacatatttgaatgtatttagaaaaataaacaaataggggttccgcgcacatttccccgaaaagtgccacctgacgtctaagaaaccattattatcatgacattaacctataaaaataggcgtatcacgaggccctttcgtctcgcgcgtttcggtgatgacggtgaaaacctctgacacatgcagctcccggagacggtcacagcttgtctgtaagcggatgccgggagcagacaagcccgtcagggcgcgtcagcgggtgttggcgggtgtcggggctggcttaactatgcggcatcagagcagattgtactgagagtgcaccataGTCGGCGGGACCAGGGAGTTTAAACTGAATGTGTCTCTGATGTACCAGAAATAATTTCTCTTAAAGGAGGCAATGCTTGAATTTCAGGATTGAAAGTTTCATTCAATCTTGTTACAATGCCTTCCTTCTCCAAATCATTAATCAAGTGGTCAAATCTTTCATAGAACTTAGCTTCCATTCTTTTGTAGAAATCATCTACTTTCAATTTCTCGTCGCTCAGGTTAGTTACGAATGTATCATAAGAACTGAAGAGCGTCTTTCCCTCGCTACTCACAGATGAGCTGCGTGATTCAAAGAATTTCTTACGTATAAAATTCTTATTGAAAGAGGTGGTTTTCCCTTGAGGAGATAACTCGTCTAACTCAATTGTTTCCTCGTTAATATTGTTCCCATCTATGGCCTTTTCGTCGGAGTCTCCCCTTTTGCTTCCTGAAGGTGTTTTAGAACCAAAGAGCTTACGCTTGAGTTTATGTGTAAATCTTCTTTTCGATGAAGATGGTTCTCCTGCAGCTATGTTGCTTTCTATATCAGCGATTGGACCTGGAGTCTGAGAGTCAGCGTCATCGTTTAAGTCACCGGTTGGCGTTTCTTGTTTCAATTCATCTGTCTGTAATGTGTAGATCAAATTTTTCAATTCGTTATAATCTAGGTAATGATTCTGCCATTCAGGGACAGCGTTGTATTTGAGAAAGTGTGAGAATCTCATTTCGAGGCACAATAATAGCCGCCTTTACCGTAGTTTTGCTGCACCTTTATCTGAGAGCTGACTGCTTTTTTGGTGTGAAACACTGTTTTCTGGTAATAATTTTTCAATGCATCGGATTACTTTTCCCACGTGCGAAATCATCAATTAATTAGATTGAAAAAAGGGTAAGGGAAAATAAGAAAGAGGCGGTAGCCTAAAGATACGGTAATTGAAACGTTTCCTATGCACAATCTTAAACCTTTTTAGGTAATTGATTAAGTTGACTGTAATATCTGTAAAAGATTACATCTAATTTACGTCTGGTTTCTGCCGATACGAAGGTTTTCTCCAGCGAGTTTATCATTATCAATACTCGCCATTTCAAAGAATACGTAAATAATTAATAGTAGTGATTTTCCTAACTTTATTTAGTCAAAAAATTAGCCTTTTAATTCTGCTGTAACCCGTACATGCCCAAAATAGGGGGCGGGTTACACAGAATATATAACATCGTAGGTGTCTGGGTGAACAGTTTATTCCTGGCATCCACTAAATATAATGGAGCCCGCTTTTTAAGCTGGCATCCAGAAAAAAAAAGAATCCCAGCACCAAAATATTGTTTTCTTCACCAACCATCAGTTCATAGGTCCATTCTCTTAGCGCAACTACAGAGAACAGGGGCACAAACAGGCAAAAAACGGGCACAACCTCAATGGAGTGATGCAACCTGCCTGGAGTAAATGATGACACAAGGCAATTGACCCACGCATGTATCTATCTCATTTTCTTACACCTTCTATTACCTTCTGCTCTCTCTGATTTGGAAAAAGCTGAAAAAAAAGGTTGAAACCAGTTCCCTGAAATTATTCCCCTACTTGACTAATAAGTATATAAAGACGGTAGGTATTGATTGTAATTCTGTAAATCTATTTCTTAAACTTCTTAAATTCTACTTTTATAGTTAGTCTTTTTTTTAGTTTTAAAACACCAGAACTTAGTTTCGACGGGACCGTCAACCCTGAACCACAAAATGTCTAAAGGTGAAGAATTATTCACTGGTGTTGTCCCAATTTTGGTTGAATTAGATGGTGATGTTAATGGTCACAAATTTTCTGTCTCCGGTGAAGGTGAAGGTGATGCTACTTACGGTAAATTGACCTTAAAATTGATTTGTACTACTGGTAAATTGCCAGTTCCATGGCCAACCTTAGTCACTACTTTAGGTTATGGTTTGCAATGTTTTGCTAGATACCCAGATCATATGAAACAACATGACTTTTTCAAGTCTGCCATGCCAGAAGGTTATGTTCAAGAAAGAACTATTTTTTTCAAAGATGACGGTAACTACAAGACCAGAGCTGAAGTCAAGTTTGAAGGTGATACCTTAGTTAATAGAATCGAATTAAAAGGTATTGATTTTAAAGAAGATGGTAACATTTTAGGTCACAAATTGGAATACAACTATAACTCTCACAATGTTTACATCACTGCTGACAAACAAAAGAATGGTATCAAAGCTAACTTCAAAATTAGACACAACATTGAAGATGGTGGTGTTCAATTAGCTGACCATTATCAACAAAATACTCCAATTGGTGATGGTCCAGTCTTGTTACCAGACAACCATTACTTATCCTATCAATCTGCCTTATCCAAAGATCCAAACGAAAAGAGAGACCACATGGTCTTGTTAGAATTTGTTACTGCTGCTGGTATTACCCATGGTATTGATGAATTGTACAAATGAGCAGGCATCGAGTGAAGTCAACATTAGTTATGTCACGCTTACATTCACGCCCTCCCCCCACATCCGCTCTAACCGAAAAGGAAGGAGTTAGACAACCTGAAGTCTAGGTCCCTATTTATTTTTTTATAGTTATGTTAGTATTAAGAACGTTATTTATATTTCAAATTTTTCTTTTTTTTCTGTACAGACGCGTGTACGCATGTAACATTATACTGAAAACCTTGCTTGAGAAGGTTTTGGGACGCTCGAAGGCTTTAATTTGCTTCAATAAAGGAGCGAGCACCCGCCTGAGGGGCGCGCCAGATCTGTTTAGCTTGCCTCGTCCCCGCCGGGTCACCCGGCCAGCGACATGGAGGCCCAGAATACCCTCCTTGACAGTCTTGACGTGCGCAGCTCAGGGGCATGATGTGACTGTCGCCCGTACATTTAGCCCATACATCCCCATGTATAATCATTTGCATCCATACATTTTGATGGCCGCACGGCGCGAAGCAAAAATTACGGCTCCTCGCTGCAGACCTGCGAGCAGGGAAACGCTCCCCTCACAGACGCGTTGAATTGTCCCCACGCCGCGCCCCTGTAGAGAAATATAAAAGGTTAGGATTTGCCACTGAGGTTCTTCTTTCATATACTTCCTTTTAAAATCTTGCTAGGATACAGTTCTCACATCACATCCGAACATAAACAACCatgggtatgaccgaccaagcgacgcccaacctgccatcacgagatttcgatcccaccgccgccttctatgaaaggttgggcttcggaatcgttttccgggacgccggctggatgatcctccagcgcggggatctcatgctggagttcttcgcccaccccgggctcgatcccctcgcgagttggttcagctgctgcctgaggctggacgacctcgcggagttctaccggcagtgcaaatccgtcggcatccaggaaaccagcagcggctatccgcgcatccatgcccccgaactgcaggagtggggaggcacgatggccgctttggtcgacccggacgggacgctcctgcgcctgatacagaacgaattgcttgcaggcatctcatgaTCAGTACTGACAATAAAAAGATTCTTGTTTTCAAGAACTTGTCATTTGTATAGTTTTTTTATATTGTAGTTGTTCTATTTTAATCAAATGTTAGCGTGATTTATATTTTTTTTCGCCTCGACATCATCTGCCCAGATGCGAAGTTAAGTGCGCAGAAAGTAATATCATGCGTCAATCGTATGTGAATGCTGGTCGCTATACTGCTGTCGATTCGATACTAACGCCGCCATCCAGTGTCCAGAAGCGAGGCGAATAAAGGTGGCATTATCTACTGTAGTTATGCAAGTATTCTTAATTTTCAGTACTAAACATGAATATTAATTATTTGTGAGCGTACAAGAAGCAAAAGGAAGTCATCTTTCTTTGAACAGTTCTGTTTTTAGGTAAGCCTTGGAACCTTAGCTATACTGACTTGATACGCCCTGTCTTTGTTGTCGTTATATAAAGTGTGCACCTTTATCATAGCCCCTAATAAGCTTCTTGCAGTAGTATTTGAACAGTGTATATCTTCATATTGCTTTTGTTGTAAATATTGCGCAAAAGCGACTATCTTTGTGATTTGGTTGAACTTTTGCATATTCACGTTATTACCATCTTTAGTGAATGTATCGTTTCCGTCTCTTATGAAGGTAATGTCCCTGATAAGCAGTGATGTAAAAGGTACACAAGGAAGCTGACTGTGGAAAATATGTTTAATTGTTCTTCTATAAACGTTGTAGTTGTTGTTTGGATGTACGACGACTTTTAGGCGCTGAAAAAGGTGGTCTGATTTAACATCTATCGGGAGAGATAGTCTTTCTATTGAATGATTTTGCAATGATGTAATGATTGAAGCAAGTGAGTTTAAGTTTCGTAAGTATAGACAAGACAGTGCAACTTGTAACCAGTAGGAAATGGTGTGCGTTTGCTGCAAAGTTGTCTCAAGAACGTAGGACGATAACTGGTTGGAAAGCGTAAACACGGAGTCAATTGTTGTATCGTTGTGTTTGAAATGTCTTGTGAATTCTATTGTTTCAATATCCAAGTAAAGAGAAGATTCTAAGAGAGTCAATGTCTTTGCAAGTGACCATGGAGATACGTTTAGAGCGAAGGCTTCGACTTCTAGAAGTTCACCCTGTTTCCATTGGAAAAGTAAATCACTGAGGTCAGTTGCACCGCACAATTCATCATTTGCGTTCGTTTTGTCTATCTCGTATTGGAGAAATAAGTTTTCGTAGTCCAGGGGCGGTTTATTTTCTTCGA'


def test_align_to_genome(test_plasmid):
    aligner = Yeast.align_to_genome([test_plasmid])
    assert len(aligner.results)


@pytest.mark.parametrize('h1,h2,rc1,rc2,expected', [
    ((1000, 1500), (1510, 2000), False, False, True),
    ((1000, 1500), (1510, 2000), True, False, False),
    ((1000, 1500), (1510, 2000), False, True, False),
    ((1000, 1500), (1510, 2000), True, True, False),
    ((1510, 2000), (1000, 1500), True, True, True),
])
def test_integration_sites(random_template, h1, h2, rc1, rc2, expected):
    h1seq = random_template[h1[0]:h1[1]]
    h2seq = random_template[h2[0]:h2[1]]
    if rc1:
        h1seq.rc()
    if rc2:
        h2seq.rc()

    integrant = jdna.Sequence.random(2000)

    plasmid = h1seq + integrant + h2seq
    a = Yeast.align([str(plasmid)], [str(random_template)])
    sites = Yeast.alignments_to_integration_sites(a.results.alignments)
    if expected:
        assert len(sites)
    else:
        assert len(sites) == 0


@pytest.mark.parametrize('h1,h2,rc1,rc2,expected', [
    ((1000, 1500), (1510, 2000), False, False, True),
    ((1000, 1500), (1510, 2000), True, False, False),
    ((1000, 1500), (1510, 2000), False, True, False),
    ((1000, 1500), (1510, 2000), True, True, False),
    ((1510, 2000), (1000, 1500), True, True, True),
])
def test_integration(random_template, h1, h2, rc1, rc2, expected):
    h1seq = random_template[h1[0]:h1[1]]
    h2seq = random_template[h2[0]:h2[1]]
    if rc1:
        h1seq.rc()
    if rc2:
        h2seq.rc()

    integrant = jdna.Sequence.random(2000)

    plasmid = h1seq + integrant + h2seq

    seqs = Yeast.homologous_recombination(plasmid, random_template)
    if expected:
        assert seqs
    else:
        assert not seqs


def test_genomic_integration(test_plasmid):
    seq = jdna.Sequence(test_plasmid)
    integrations = Yeast.genomic_integration(seq)
    assert integrations


def test_pick_qc_primers_for_interagration(session, test_plasmid):

    seq = jdna.Sequence(test_plasmid)
    integrations = Yeast.genomic_integration(seq)
    for integration in integrations:
        Yeast.integration_qc_primers(integration, size_range=(400, 2000), session=session, pick_left=True, pick_right=True)


def test_logger(session):
    session.Sample.one()